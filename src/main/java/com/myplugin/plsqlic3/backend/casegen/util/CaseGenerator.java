package com.myplugin.plsqlic3.backend.casegen.util;

import com.myplugin.plsqlic3.backend.casegen.tkmutation.parser.PlPgSqlListenerImpForVerifyValidation;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;
import com.myplugin.plsqlic3.backend.parsers.parseplpgsql.LexerDiscardErrorListener;
import com.myplugin.plsqlic3.backend.parsers.parseplpgsql.ParserDiscardErrorListener;
import com.myplugin.plsqlic3.backend.parsers.parseplpgsql.PostgreSQLLexer;
import com.myplugin.plsqlic3.backend.parsers.parseplpgsql.PostgreSQLParser;

import java.text.SimpleDateFormat;
import java.util.Date;

import static com.myplugin.plsqlic3.backend.parsers.parseplpgsql.ERROR_MODE.EXCEPTION;

public abstract class CaseGenerator {
    public abstract TestCase genTestCase();

    public abstract TestCase genTestCase(String seed_name);

    /**
     * Update test case names for the next round of fuzzing
     *
     * @param seed_name name of seed
     * @param naive     if test case generated by naive method without validity check
     * @return new name for test case
     */
    protected static String getCaseName(String seed_name, boolean naive) {
        // composition of seed names: 0264-pghistory_tracker_master-test-pgtap_20#9#20230326_025338#1679770418566.sql
        // elements are separated by "#"
        // original seed name # number of mutations # time of test case generation # more accurate timing
        seed_name = seed_name.substring(0, seed_name.length() - 4);     // delete ".sql"
        String[] file_name_split = seed_name.split("#");
        String res = String.format("%s%s#%s#%s#%s.sql",
                file_name_split[0],
                naive ? "-naive" : "",
                file_name_split.length == 4 ? Integer.parseInt(file_name_split[1]) + 1 : "1",
                new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()),
                System.currentTimeMillis());
        if (res != null) {
            return res;
        } else {
            return seed_name;
        }
    }

    /**
     * Validity check for generated test case
     *
     * @param mutant_case generated test case
     * @return whether the test case is valid or not
     */
    protected static boolean verifyCaseValidity(String mutant_case) {
        try {
            CharStream charStream = CharStreams.fromString(mutant_case);
            PostgreSQLLexer lexer = new PostgreSQLLexer(charStream);
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            PostgreSQLParser parser = new PostgreSQLParser(tokens);
            parser.setErrorMode(EXCEPTION);
            ParseTree tree = parser.root();
            parser.setBuildParseTree(true);
            ParseTreeWalker walker = new ParseTreeWalker();
            PlPgSqlListenerImpForVerifyValidation listener = new PlPgSqlListenerImpForVerifyValidation();
            walker.walk(listener, tree);
        } catch (LexerDiscardErrorListener.LexerErrorException
                 | ParserDiscardErrorListener.ParserErrorException
                 | PlPgSqlListenerImpForVerifyValidation.ListenerErrorException e) {
            return false;
        }
        return true;
    }
}
